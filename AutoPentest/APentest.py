from abc import ABC, abstractmethod
from utils import PentestUtils as pu

class APentest(ABC):
    """
    APentest adalah abstract class dalam Template design pattern yang digunakan
    sebagai template automation pentesting
    Template ini digunakan pada saat pemanggilan di Client.py (file utama yg dijalankan)
    """
    def __init__(self) -> None:
        self._lHost = ""
        self._targets = []
        self._scnOutFile = None
        self._enumOutFile = None # nama file penyimpan hasil enumerasi luaran scanning
        self._vulnOutFile = None 
        self._bufHub = {} # daftar list target yg vulner utk diexploit

    @property
    def getTargets(self):
        return self._targets
    
    @property
    def getLHost(self):
        print("[DEBUG] getLHost in APentest:", self._lHost)
        return self._lHost
    
    @property
    def bufHub(self):
        return self._bufHub
    
    @bufHub.setter
    def bufHub(self, dictBaru):
        if isinstance(dictBaru, dict):
            self._bufHub = dictBaru
        else:
            raise ValueError("Input harus Dictionary")
    
    def getItem(self, key):
        print("[DEBUG] _bufHub: ", self._bufHub)
        return self._bufHub.get(key, None)
    
    def setItem(self, key, data):
        self._bufHub[key] = data

    def delItem(self, key):
        if key in self._bufHub:
            del self._bufHub[key]
        else:
            print(f"Key {key} tidak ditemukan")
            

    @property
    def vulnOutFile(self):
        return self._vulnOutFile
    
    @vulnOutFile.setter
    def vulnOutFile(self, vof):
        self._vulnOutFile = vof

    @property
    def scnOutFile(self):
        return self._scnOutFile
    
    @scnOutFile.setter
    def scnOutFile(self, sof):
        self._scnOutFile = sof

    @property
    def enumOutFile(self):
        return self._enumOutFile
    
    @enumOutFile.setter
    def enumOutFile(self, eof):
        self._enumOutFile = eof
    
    def startPentest(self, params) -> None:
        """
        Template method yang mendifinisikan langkah-langkah automation pentesting
        params berisi list parameter dengan urutan tepat pentesting mulai dari
        infoGathering - reporting
        params berupa dictionary
        """
        self.banner()
        self.infoGathering(params)
        self.scanning(params)
        self.enumerating(params)
        self.vulnerAnalysist(params)
        self.exploitingTarget(params)
        self.reporting(params)
    
    def infoGathering(self, params):
        self._targets = pu.extract_ip_addresses(params['ipAddrs'])
        print("self._targets:", self._targets)

        # Option: mapping target -> local IP used to reach that target
        local_map = {}
        for t in self._targets:
            # handle networks by picking a representative host (first host)
            try:
                if '/' in t:
                    net = ipaddress.ip_network(t, strict=False)
                    rep = str(next(net.hosts(), net.network_address))
                else:
                    rep = t
            except Exception:
                rep = t

            local_ip = pu.getLocalIP(target=rep)
            local_map[t] = local_ip

        self._lHost_map = local_map
        print("local_map:", self._lHost_map)

        # If you only need one local IP (first successful), find it:
        self._lHost = None
        for v in local_map.values():
            if v:
                self._lHost = v
                break
        print("chosen local IP:", self._lHost)

    @abstractmethod
    def banner(self) -> None:
        pass

    @abstractmethod
    def scanning(self, params) -> None:
        pass
    
    @abstractmethod
    def enumerating(self, params) -> None:
        pass

    @abstractmethod
    def vulnerAnalysist(self, params) -> None:
        pass

    @abstractmethod
    def exploitingTarget(self, params) -> None:
        pass
    
    @abstractmethod
    def reporting(self, params) -> None:
        pass
