from __future__ import annotations
from abc import ABC, abstractmethod
from typing import Any

class Exploit(ABC):
    """
    Exploit interface menentukan metode-metode untuk melakukan exploitasi
    Abstract Exploit -- abstract product dalam kasus abstract factory
    """ 
    def __init__(self):
        super().__init__()
        self._targets = []
        self._lHost = None
        self._payload = None
        self._attkCommand = None
        self._outExpFile = None

    @property
    def outExpFile(self):
        return self._outExpFile
    
    @outExpFile.setter
    def outExpFile(self, oef):
        self._outExpFile = oef

    @property
    def targets(self):
        return self._targets
    
    @targets.setter
    def targets(self, trgt):
        if all(isinstance(item, list) for item in trgt):
            self._targets = trgt
        else:
            raise ValueError("Seluruh items harus berupa lists.")

    @property
    def attkCommand(self):
        return self._attkCommand
    
    @attkCommand.setter
    def attkCommand(self, cmd):
        self._attkCommand = cmd
        
    @property
    def lHost(self):
        return self._lHost
    
    @lHost.setter
    def lHost(self, host):
        self._lHost = host

    @property
    def getPayload(self):
        return self._payload

    @abstractmethod
    def makePayload(self, params=list):
        pass

    @abstractmethod
    def startExploit(self) -> None:
        pass

class MSFExploit(Exploit):
    """ 
    MSF Exploit adalah concrate exploit dengan menggunakan metasplooit tools
    """

    def __init__(self) -> None:
        self._RHost = []
        self._LHost = []
        self._RPort = []
        self._LPort = []
        self._payload = []

    def setLHost(self, LIPAddr) -> None:
        self._LHost = LIPAddr

    def setRHost(self, RIPAddr) -> None:
        self._RHost = RIPAddr

    def setLPort(self, LPort) -> None:
        self._LPort = LPort

    def setRPort(self, RPort) -> None:
        self._RPort = RPort

    def setPayload(self, payload: list) -> None:
        self._payload = payload

    def startExploit(self) -> None:
        print("start exploiting using msf console")