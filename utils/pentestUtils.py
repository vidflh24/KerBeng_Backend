import re
import ipaddress
import socket

class PentestUtils:

    def __init__(self) -> None:
        pass
    
    @classmethod
    def extract_ip_addresses(self, input_string):
        # Regular expression to match IP addresses (IPv4) and subnet prefixes (optional)
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?\b'
        
        # Use re.findall to extract all IP addresses or IP with subnet from the input string
        matches = re.findall(ip_pattern, input_string)
        
        ip_list = []

        # Iterate over each match to check if it's an IP address or a network
        for match in matches:
            if '/' in match:
                # Handle the case where it's an IP network with a subnet
                try:
                    network = ipaddress.ip_network(match, strict=False)
                    # Expand all IP addresses in the subnet and add to the list
                    ip_list.extend([str(ip) for ip in network.hosts()])
                except ValueError:
                    print(f"Invalid IP network: {match}")
            else:
                # If it's just a single IP, add it directly to the list
                try:
                    ip = ipaddress.ip_address(match)
                    ip_list.append(str(ip))
                except ValueError:
                    print(f"Invalid IP address: {match}")

        return ip_list 
    
    @classmethod
    def isPrivateIP(self, ipString):
        try:
            # Parse the IP address
            ip = ipaddress.ip_address(ipString)
            # Check if the IP is private
            return ip.is_private # private is True
        except ValueError:
            print(f"Invalid IP address: {ipString}")
            return None

    @classmethod
    def getLocalIP(self):
        try:
            # Create a socket and connect to a public DNS server (Google's DNS in this case)
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            # The IP here is arbitrary; the point is to determine the local interface used to connect
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except Exception as e:
            print(f"Error: {e}")
            return None